{"version":3,"sources":["index.js"],"names":["Square","props","winner","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","onClick","value","Board","i","win","_this","this","key","squares","_this2","cols","map","row","col","winners","renderSquare","React","Component","Game","_this3","Object","C_Users_joshu_Documents_GitHub_React_Tutorial_app_tic_tac_toe_my_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","C_Users_joshu_Documents_GitHub_React_Tutorial_app_tic_tac_toe_my_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","C_Users_joshu_Documents_GitHub_React_Tutorial_app_tic_tac_toe_my_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","state","history","Array","fill","xIsNext","stepNumber","order","slice","length","calculateWinner","setState","concat","step","status","_this4","current","moves","move","pos","Math","abs","desc","jumpTo","handleClick","move_order","lines","_lines$i","C_Users_joshu_Documents_GitHub_React_Tutorial_app_tic_tac_toe_my_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1c37073d.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n/* class version of square\r\nclass Square extends React.Component {\r\n    render() {\r\n      return (\r\n        <button \r\n          className=\"square\" \r\n          onClick={() => this.props.onClick()}\r\n        >\r\n          {this.props.value}\r\n        </button>\r\n      );\r\n    }\r\n  }\r\n*/\r\n// function version of square\r\nfunction Square(props){\r\n  if(!props.winner){\r\n    return(\r\n      <button \r\n        className =\"square\"\r\n        onClick={props.onClick}\r\n      >\r\n        {props.value}\r\n      </button>\r\n    )\r\n  }\r\n  else{\r\n    return(\r\n      <button \r\n        className =\"square-winner\"\r\n        onClick={props.onClick}\r\n      >\r\n        {props.value}\r\n      </button>\r\n    )\r\n  }\r\n}\r\n  class Board extends React.Component {\r\n    renderSquare(i,win) {\r\n      return (\r\n        <Square \r\n          key = {i}\r\n          value={this.props.squares[i]} \r\n          onClick={() => this.props.onClick(i)}\r\n          winner = {win}\r\n        />\r\n      );\r\n    }\r\n  \r\n    render() {\r\n      const rows = [0,1,2];\r\n      const cols = [0,1,2];\r\n      return(\r\n          rows.map((row) =>{\r\n            return(\r\n              <div key={row} className='board-row'>\r\n                {cols.map((col) =>{\r\n                  if(this.props.winners == null){\r\n                    return this.renderSquare(row*3 + col,false)\r\n                  }\r\n                  else if(this.props.winners[0] == (row*3 + col) || this.props.winners[1] == (row*3 + col) || this.props.winners[2] == (row*3 + col)){\r\n                    return this.renderSquare(row*3 + col, true)\r\n                  }\r\n                  else{\r\n                    return this.renderSquare(row*3 + col,false)\r\n                  }\r\n                })}\r\n              </div>\r\n            )\r\n        })\r\n      )\r\n      /* hard coded board state\r\n      return (\r\n        <div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n          </div>\r\n        </div>\r\n      );*/\r\n    }\r\n  }\r\n  \r\n  class Game extends React.Component {\r\n    constructor(props){\r\n      super(props);\r\n      this.state = {\r\n        history: [{\r\n          squares: Array(9).fill(null),\r\n        }],\r\n        xIsNext: true,\r\n        stepNumber: 0,\r\n        order: true,\r\n      }\r\n    }\r\n    handleClick(i){\r\n      const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n      const current = history[history.length - 1];\r\n      const squares = current.squares.slice();\r\n      if(calculateWinner(squares) || squares[i]/*this equates to sqaures[i] != null*/){\r\n        return;\r\n      }\r\n      squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n      this.setState({\r\n        history: history.concat([{\r\n          squares: squares,\r\n        }]),\r\n        xIsNext: !this.state.xIsNext,\r\n        stepNumber: history.length,\r\n      });\r\n    }\r\n    jumpTo(step){\r\n      this.setState({\r\n        stepNumber: step,\r\n        xIsNext: (step % 2) == 0,\r\n      })\r\n    }\r\n    move_order(){\r\n      this.setState({\r\n        order: !this.state.order ? true : false,\r\n      });\r\n    }\r\n    render() {\r\n      const history = this.state.history;\r\n      const current = history[this.state.stepNumber];\r\n      const winner = calculateWinner(current.squares);\r\n      const order = this.state.order ? \"Ascending order\" : \"Descending order\";\r\n      const moves = history.map((step,move) => {\r\n      let pos = 0;\r\n      if(!this.state.order){\r\n        move = Math.abs(move - history.length + 1);\r\n      }\r\n      if(move > 0){\r\n        for(let i = 0; i < 9; i++){\r\n          if(history[move].squares[i] != history[move - 1].squares[i]){\r\n            pos = i;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      let row = 0;\r\n      while(pos >= 3){\r\n        pos = pos - 3;\r\n        row++;\r\n      }\r\n      const desc = move ? \r\n        'Go to move #' + move + \" location: (\" + row + \",\" + pos + \")\" : 'Go to game start';\r\n      if(move == this.state.stepNumber){\r\n        return (\r\n          <li key ={move}>\r\n            <button onClick={() => this.jumpTo(move)}><strong>{desc}</strong></button>\r\n          </li>\r\n        )\r\n      }\r\n      else{\r\n        return (\r\n          <li key ={move}>\r\n            <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n          </li>\r\n        )\r\n      }\r\n    });\r\n\r\n    let status;\r\n    if(winner){\r\n      status = 'Winner: ' + current.squares[winner[0]];\r\n    }\r\n    else if(history.length == 10){\r\n      status = 'Draw: Cats game';\r\n    }\r\n    else{\r\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n    }\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={(i) => this.handleClick(i)}\r\n            winners = {winner}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <button className='Order of buttons' onClick={() => this.move_order()}>{order}</button>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n    }\r\n  }\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );\r\n\r\n  function calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return lines[i];\r\n      }\r\n    }\r\n    return null;\r\n  }"],"sourceRoot":""}